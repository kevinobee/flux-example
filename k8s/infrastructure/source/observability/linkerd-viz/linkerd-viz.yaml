---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRRTZMdjBOR3MwWFhleXI4eG1SWks4akFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURnek1URXdNREF5TlZvWApEVEl6TURnek1URXdNREF5TlZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTTdlVGxUQ0pkc1VoQUFPZ2wxNXVYRnAKN2F1YmllNTJENmUydjF6Nm5qU0JlVW94S3dpSHJCRDJSYzZyRDVvdlFITGl0cHZ0anlmOHpTZlUvanZVSjBOawpDUVZzRW1jN0VOYVR4WmU3bGZ5aWxUWExQeUp4aUlEOThMb0l6VnBBa0tjUlVIdFRrWXlJRHBaVFdFdEdSNnJDCm16ZlErU2lTeXNqN0tDamtpNGlkclo1R2dHaThsZWFac2Z1bjZaWjdxaGNFV2JJemozdWZvbm5YN1NYUEVGRUsKWlgzRmpLUndQTE5lbTBZUjlVQW1DK0d1K1RUOUVlT0NmSDhhZUtVdlY3TkxYcHgrK2J0NHpkTFQ0QU5oM2dKTApFV29DdEZBUGxnVEJDQ21DZDhiYm1ieVZEU0t3czg3NHJSWGxxMFF4WnpybTYvZ0lrcTdVZ2JaZ1NzbUZOY01DCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFLaERKZnhkdU4yY3hSMmVyaUtqTkk4WHVlWTV6a2IvCkh5UzMwWnhxQnExWVFvdFdWNUZ1b2ozL2hmSHViN09tQjJpWmY0THRFNHBDejZEZjhDM1ZTSHdKczQyMUR0LzAKVzJGY2dyMWhDemhUUDRUTUZGQnY0d3lSNlJ2bDB2eUVDMEpSQzd0bUNWT1VEaHZCOEs1Z1hTVytlRjNtajZ1NQpoVW1wS1FMamhoMWExTW1Qb2txY2QydmpMOXpBeHZMdnRJQUlKeThHN3JWeDdLQTBpMFlzWitxWlg1Vi9PZGtSCmtDWTloWDFLZlBhcHJsTFlwaVZlY3lDcUFhbXppR0Z1Q0FVRmhVaGVrekdtZmwwTnEwMkdrbDg3TjQzaThmejIKMGF1U2cwVWM0T2J3SVEzdXdPU2dENUxQYnY1WjNpM2R3ajl6SEg2SlJwc2hBSEFvQmUxV3VxZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBenQ1T1ZNSWwyeFNFQUE2Q1hYbTVjV250cTV1SjduWVBwN2EvWFBxZU5JRjVTakVyCkNJZXNFUFpGenFzUG1pOUFjdUsybSsyUEovek5KOVQrTzlRblEyUUpCV3dTWnpzUTFwUEZsN3VWL0tLVk5jcy8KSW5HSWdQM3d1Z2pOV2tDUXB4RlFlMU9SaklnT2xsTllTMFpIcXNLYk45RDVLSkxLeVBzb0tPU0xpSjJ0bmthQQphTHlWNXBteCs2ZnBsbnVxRndSWnNqT1BlNStpZWRmdEpjOFFVUXBsZmNXTXBIQThzMTZiUmhIMVFDWUw0YTc1Ck5QMFI0NEo4ZnhwNHBTOVhzMHRlbkg3NXUzak4wdFBnQTJIZUFrc1JhZ0swVUErV0JNRUlLWUozeHR1WnZKVU4KSXJDenp2aXRGZVdyUkRGbk91YnIrQWlTcnRTQnRtQkt5WVUxd3dJREFRQUJBb0lCQUJ3MDQ2bGE3NTUzcGFmOApVbm84WnJTNEpOZ0pWVDFXaTd2cWh4MCtidVBwNDRmaVBHUGxXK2pVSzZDS1lvNDdjeVkzRTM4ZlhTMnVvcXFUCnVEYWdMdHBaZ1lGand2NmdaeU5hOHM1Rm5hWGM1VXQ0Y3h0WEw2Mm04blByVDFUSENQSSt3aUtPdW9IVzYyWkQKNXY0Y2p4a1JmK2lVYmVUQ1h6UVlTdG1Ja0I0SVl4dWNrRjBTZDlLSFZxbU9OZEpyV1dINFFuN2QvNmMzVFV3TQpCd2IwV1dGRVFWei9XNlExa0pzMDhCaUNkaEc4TGphaXJwT2QxamdyWkZWcHFHeVBiOEhiVUlLbkdJNlV5czY2Ci9ydHFuTW9mc3R1TERWNTgrZ3cwVVdjZFNyb3lMaWpEUzZPd0pTcko3SVN1aHV5amtvUjN2NjBrM2NuS3ZzRWoKUjloRlJvRUNnWUVBM0lKVlAySmVITFVIVm9IUE1WL2NqT29uWGlVRnFRT3N4d0hITWQzYStiOUxSM0l5OWFDaQpWOFZqbEEwRHV6aFJsZC9JbTdzTXJyNDRrakpXUGZneS9LTGJqN1pDSkRTekVSTm1QTEMvcE0rSXIxdjVDVXhpCnduVFB3OHk5N0ljRlFvZlo5cTNJaU1POFZGazZZNGFWUkhDR1pBOUQ0ZXNDdFpQaDV5aDloY3NDZ1lFQThDbnUKbm54UmY3SmwzSHRQcjBIUmJRSXdESWxFM0hiVktjRWpOUjlLZXovK3dXc2ZTcGdOZUVZTzMycngyVEcwMWJubwo5MDcwZGNSTUUvMFJUQ1VWTnBZeFp1aFB3N2R2aGhuS1RUSFNXTEN1d25Md2JuY2VCMU1HcGxyNHZ0U3F5UWJhCklYeVhQY0RHeTE2ZHA2MjVmdXdBbk5xb2Fxd3l1aVdrM1RtRlVPa0NnWUVBZ2F1WEM5WUJ0K253cmJ0YUp4UFQKTTM2Q3RnY1paQUdJT2VMZXk0RkdRdlZ1QkU2d2p1YnVjS1RmNFBFaVQ1ZFh5c1cxUjNiZ2gyWFBDSkhYUzB2SQpWKzVCSlNxdGpITDlGajZOTVlWU3ZVMVplSjJpUGdpUVR2KzRLZEVkb3BqbnkrN3RpdlU0NXN3TDFLSkFCc1RlCnhFZFRrRVcxeW9XVHEwbVNYNGZkQUs4Q2dZRUFvSHBraUdKcDB2cFNObEh2blJ4TjVKbGhvZjdYbExtVEZxT0gKOHlkRmpiWGxkVGt2WDVqYTUxTm8vTUZwZWNoTkhjTnNlRlM1NVRlVjNvVnIyWVd0OXh2RlJ3NVV2bU1Fa29jSgpOeXZqY29BZFJyR25GeWxoVjJPVFBmWHI0UmdhUnRuZFNDTUlyS3IwSzFDOTZCMmRwY0h0WnVKMVIxSnBVeGwwCllKN2ZCb0VDZ1lFQW5TNkZhdFBvM0svR3JkR1VDSlZ0L3Z0WEZ0UlZoMTNyeDA0Qm0rT3R2cWVnRjBhQ29xZFEKOFMvRFBMRnZiZnQ4bkVYU05PbzlwOXh3MTRsSkZKa2VCdnF4SWl3b0pEaC85V0RNV0VMSGhiQ2JBTm5CL1JCWQpBLzJCUEFsVjRZV3BTeWt5Q0MxU01lcWJUSDd1U1M3SDVwYnFKOVp2SmpqVGF0Z0pzS2NrYTkwPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRRTZMdjBOR3MwWFhleXI4eG1SWks4akFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TURnek1URXdNREF5TlZvWApEVEl6TURnek1URXdNREF5TlZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTTdlVGxUQ0pkc1VoQUFPZ2wxNXVYRnAKN2F1YmllNTJENmUydjF6Nm5qU0JlVW94S3dpSHJCRDJSYzZyRDVvdlFITGl0cHZ0anlmOHpTZlUvanZVSjBOawpDUVZzRW1jN0VOYVR4WmU3bGZ5aWxUWExQeUp4aUlEOThMb0l6VnBBa0tjUlVIdFRrWXlJRHBaVFdFdEdSNnJDCm16ZlErU2lTeXNqN0tDamtpNGlkclo1R2dHaThsZWFac2Z1bjZaWjdxaGNFV2JJemozdWZvbm5YN1NYUEVGRUsKWlgzRmpLUndQTE5lbTBZUjlVQW1DK0d1K1RUOUVlT0NmSDhhZUtVdlY3TkxYcHgrK2J0NHpkTFQ0QU5oM2dKTApFV29DdEZBUGxnVEJDQ21DZDhiYm1ieVZEU0t3czg3NHJSWGxxMFF4WnpybTYvZ0lrcTdVZ2JaZ1NzbUZOY01DCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFLaERKZnhkdU4yY3hSMmVyaUtqTkk4WHVlWTV6a2IvCkh5UzMwWnhxQnExWVFvdFdWNUZ1b2ozL2hmSHViN09tQjJpWmY0THRFNHBDejZEZjhDM1ZTSHdKczQyMUR0LzAKVzJGY2dyMWhDemhUUDRUTUZGQnY0d3lSNlJ2bDB2eUVDMEpSQzd0bUNWT1VEaHZCOEs1Z1hTVytlRjNtajZ1NQpoVW1wS1FMamhoMWExTW1Qb2txY2QydmpMOXpBeHZMdnRJQUlKeThHN3JWeDdLQTBpMFlzWitxWlg1Vi9PZGtSCmtDWTloWDFLZlBhcHJsTFlwaVZlY3lDcUFhbXppR0Z1Q0FVRmhVaGVrekdtZmwwTnEwMkdrbDg3TjQzaThmejIKMGF1U2cwVWM0T2J3SVEzdXdPU2dENUxQYnY1WjNpM2R3ajl6SEg2SlJwc2hBSEFvQmUxV3VxZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: admin
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kubelet
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: proxy-admin
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kubelet
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.0
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b
        linkerd.io/created-by: linkerd/helm stable-2.12.0
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:stable-2.12.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: linkerd-viz
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.0
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.12.0
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.45.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.0
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: e261d356d7e7685ea54e3c0b6e83d94f2a9f143ee68bdf9257df46f9d19f19af
        linkerd.io/created-by: linkerd/helm stable-2.12.0
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.12.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU5aN2I0d3RTaGpHYlo2REF0RFRjdjR3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNApNekV4TURBd01qWmFGdzB5TXpBNE16RXhNREF3TWpaYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEY0lxZXdzYUtFSWFuNzh1U09SQjd2NGt1Znh4NjYrVEI0WC83Tkd3UUllUUY5MnZwVXBVOENUa0VPYUV2KwpzWmxKOXVpSk94TGQzQ0FaZ3J2VDY1dWhYeTl2dlF3YXlsWVRmd0tEekdVY252a2lYbVBESW9vcVRXT0xHdGZMCjRxM0VsWENtRWoybG5CWkFVem1adS80QVpKb0kxZVdmWk04dDhQbThKMkpSWXlKL1ltVDB5Qzh4TXBzOXJZbSsKd3JpaUlFRDk3YWcxN0hiSC9FZGFBcDhiWU9vNEg4NjNIbHh2TTBBRzgvSE9tY0lNVnFLWjFhVWZLTXFHSWtJRgpvczAvT2dzZStaU09Yc0wwVWFReE9nZlVFajJGTlpuVTNqeTk4aUNxajlxUmlaUDd5MkNxWitoS2NTYjhyVjVjCmk1dllLdDdHYTlQVWV4YVRHazBMdWNGdEFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUN5aG92bGU2ZWJ6NCt3ZUUydVNldXRvd09EMGNwOXVXVUZ5STBzenlhMDczclUydHRlc1FHTkkxSGQKbkVBR2kwSVRKc0lhRk1MVzFtdUV1ZjgxQ3UvM1B0b09mdk5TNDNDRUJpTWFJUHFaZXdzb1FUSmw1WHE0M0FrcgpVUXk5LzRzSmxLSUg0cWZyblBreXRZT3FVaVV5N2Nyd2hlUVd1Z05lV3prZCtzNU0xY1ZZeVozSW50RG9vTlozClVJbDh3aHNPK2l6bUNrZFp2NnlzSUxIalVHam1WclRiZVVpN3BvOXZuTjJPVWpqZ21IUEMzMzg0dUNwNHdwTlMKbzZsM3VRWXVSUzR5OFcybHR4QVdKcTFYNExjR1hSNkZJbFduNFVzVk5kaS9vSWpnaWlCQ3JJY3cyWTB6dTJXeQpITjdXcm1LaWtCM0t1ZU5aVFJRWmVGakNEdDM0Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBM0NLbnNMR2loQ0dwKy9Ma2prUWU3K0pMbjhjZXV2a3dlRi8relJzRUNIa0JmZHI2ClZLVlBBazVCRG1oTC9yR1pTZmJvaVRzUzNkd2dHWUs3MCt1Ym9WOHZiNzBNR3NwV0UzOENnOHhsSEo3NUlsNWoKd3lLS0trMWppeHJYeStLdHhKVndwaEk5cFp3V1FGTTVtYnYrQUdTYUNOWGxuMlRQTGZENXZDZGlVV01pZjJKawo5TWd2TVRLYlBhMkp2c0s0b2lCQS9lMm9OZXgyeC94SFdnS2ZHMkRxT0IvT3R4NWNiek5BQnZQeHpwbkNERmFpCm1kV2xIeWpLaGlKQ0JhTE5Qem9MSHZtVWpsN0M5RkdrTVRvSDFCSTloVFdaMU40OHZmSWdxby9ha1ltVCs4dGcKcW1mb1NuRW0vSzFlWEl1YjJDcmV4bXZUMUhzV2t4cE5DN25CYlFJREFRQUJBb0lCQVFDaVNNSUsxc21TVXliMwpZSGJ5RW5Ja01sWEI4bzlMRTQyU0VHTE5YZzg1Rjh2cnRsVTV0YXhyYkxrMUg5cDJad00wcmR0NzM1cm5CL0o2CkhCRFFDQzl4WmJTWTBXdHRES0VzT2tQbVdmWm9oU0h4SGxpNWNHc2ZDSEpNQ0h2eUNLaEY5azFYZ0xjRnNlNE4KZWMxSzhuWXNYLzNXYWFtZ09qY3FEUzV1Y1RKZ0FERkRTZUZ6UDdVZTJGdXpFSy9pQW9UcXNRVjNhM1A2ZG1Xbwo5ajFVUDJ5MU1kT3ExQ3ViU05ZQmVsQUtNeEg4c0ZYRVgrVkZxMk55MHU3a2pSU2piNHh4Ump5NHRXb1g3elIwClkreVhXNDlmY3AzV3lhQjdJVklmblNEcGpTYnNHV28xZStFTkdGWFRETGN1bjAxaUlHWU1YbmpqblhXZGtZN0kKT1Nwb2M2Y1pBb0dCQVBLVytFbDkreW9HaUtiS25qRkUwQVMwQS9iQ2VzamlxMVBlL054YlJKRVY5YkZkSHJEUgpjWHJRRnEzSDN6Qm1icmRPTmhZRWRDQXZLNnpwbFBYcWhZTzgxRmp6QjFOckMwaVlObkpETTJFdEFBQnI0WjlUCk1OTFFYZ2VTaTVhOWxMb1g1QktZZ3VLNjl1UmxlQUFXM2RiTXRQMW9PaVFEdDNsZVdFbEo3WHJMQW9HQkFPaE4KNjUwTmtDaGVPN3FpSndsSFdxM1hRSnN4am5pVm5PNE4wdk13aGxReGlHR2tKSTFQVnMySnRBcXBTdGZsVDNrawpYSXJtbmQxL2tmSTlSWGtKTVh4LzJheGVzajRENWVqMHIweGRCWkR4cFJHUmRsdzF4UW9KMEZTZGtHUWZQUG1hCmMvQ0FOS0o2ZzE5akcvK0k4NjN3UVJ3SXpJSG5BSERqbi9rQXRCV25Bb0dCQUtrOVM2QXg1THh2N0h1NEZWNjMKN0F1cjdxd0RCNWdJRXBDam0zSzd0WDBtZmM2cjhWSlgrN3c3V2VjSTdwc2NpeGNVMkVUSi9KM0xhc1BwL1VNRwp4dmllRHVLelFhUWZwTEtUaGtCMncyeUM4V0paNFFDL0QrdXk5RGFDTlNJSHhxK0JKVnNYelJBU2NWWHJ1Q2tQCnl0b2szQXVCNERYcDVlRWxRYUIzazlhN0FvR0FHV2Fid3JwKzdzc1BBT05HSFcrZDdMQkNzaldDL0pCdmJtQTQKbHJyUmxWY3RNSEFBUnl0THRJSEFIQUpTMnJTS01oYlZ2NkpqMUpwa1hQWnlLRC9uRjFQcmV6dUhoZHhyUVVPdgovMHVVbGpxMTcrdlY0MU5Gemtrd2JIQW1INnlDd0ZBeEtUVDdqR0NWQ05NUGRxdUU2Wm9CcEkwWnY0S0F1OWRICjRMUkEvTFVDZ1lFQTQ1TlBRQ3hBZVVIMHpJYUlFOUM3d0EzcVkySEdjWnRPNnhMV0gwN3R2a3F0LzRKV2liOEYKMG5EYjFRc2JrSGhpci9GQk5JWmVCZksvaW85RndyMGJoV3h6R0g3UTdGN3NqSmRtRDdFa3ZhUDFUaUgycFBkNApSeElUTGM3R0RHSjVHd0V4R3JrK0tjZlNnUGJZR1hDc25xdmNseG03VlpzenJtYm50SW9EM1owPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU5aN2I0d3RTaGpHYlo2REF0RFRjdjR3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNApNekV4TURBd01qWmFGdzB5TXpBNE16RXhNREF3TWpaYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEY0lxZXdzYUtFSWFuNzh1U09SQjd2NGt1Znh4NjYrVEI0WC83Tkd3UUllUUY5MnZwVXBVOENUa0VPYUV2KwpzWmxKOXVpSk94TGQzQ0FaZ3J2VDY1dWhYeTl2dlF3YXlsWVRmd0tEekdVY252a2lYbVBESW9vcVRXT0xHdGZMCjRxM0VsWENtRWoybG5CWkFVem1adS80QVpKb0kxZVdmWk04dDhQbThKMkpSWXlKL1ltVDB5Qzh4TXBzOXJZbSsKd3JpaUlFRDk3YWcxN0hiSC9FZGFBcDhiWU9vNEg4NjNIbHh2TTBBRzgvSE9tY0lNVnFLWjFhVWZLTXFHSWtJRgpvczAvT2dzZStaU09Yc0wwVWFReE9nZlVFajJGTlpuVTNqeTk4aUNxajlxUmlaUDd5MkNxWitoS2NTYjhyVjVjCmk1dllLdDdHYTlQVWV4YVRHazBMdWNGdEFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUN5aG92bGU2ZWJ6NCt3ZUUydVNldXRvd09EMGNwOXVXVUZ5STBzenlhMDczclUydHRlc1FHTkkxSGQKbkVBR2kwSVRKc0lhRk1MVzFtdUV1ZjgxQ3UvM1B0b09mdk5TNDNDRUJpTWFJUHFaZXdzb1FUSmw1WHE0M0FrcgpVUXk5LzRzSmxLSUg0cWZyblBreXRZT3FVaVV5N2Nyd2hlUVd1Z05lV3prZCtzNU0xY1ZZeVozSW50RG9vTlozClVJbDh3aHNPK2l6bUNrZFp2NnlzSUxIalVHam1WclRiZVVpN3BvOXZuTjJPVWpqZ21IUEMzMzg0dUNwNHdwTlMKbzZsM3VRWXVSUzR5OFcybHR4QVdKcTFYNExjR1hSNkZJbFduNFVzVk5kaS9vSWpnaWlCQ3JJY3cyWTB6dTJXeQpITjdXcm1LaWtCM0t1ZU5aVFJRWmVGakNEdDM0Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: fc63810dd30db396b32241590d242f47aedb5cad680427bdde61dcb835ee85eb
        linkerd.io/created-by: linkerd/helm stable-2.12.0
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.12.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.0
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.12.0
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:stable-2.12.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
